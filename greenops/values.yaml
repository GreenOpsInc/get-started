common:
  kubernetes:
    generateRoles: true
    generateServiceAccount: true
  db:
    address: redisserver.greenops.svc.cluster.local:6379
    deployRedis: true
    password:
      enabled: false
      secretName: ""
      key: ""
    # Currently only GCP is supported for automated PersistentVolume creation. Other cloud providers have to be done manually.
    usePersistentVolume: false
  server:
    greenopsUrl: ""
  sso:
    enabled: false
    config:
      url: ""
      dex.config: |-
        ...
    secretName: greenops-sso
    secret:
      clientIdKey: client-id
      clientSecretKey: client-secret
  namespace: greenops
  orgName: org
  imageCredentials:
    enabled: true
    imagePullSecret: regcred
  license:
    secretName: greenops-license
    key: license

server:
  name: greenops-server
  image: docker.io/greenopsinc/goserver:v1.0.0
  replicas: 1
  imagePullPolicy: Always
  restartPolicy: Always
  port: 8080

controller:
  name: greenops-controller
  image: docker.io/greenopsinc/controller:v1.0.0
  replicas: 1
  imagePullPolicy: Always
  restartPolicy: Always
  metrics:
    bindAddress: localhost:8082
    healthProbeBindAddress: localhost:8083

pipelineRepoServer:
  name: greenops-reposerver
  image: docker.io/greenopsinc/pipelinereposerver:v1.0.0
  port: 8080
  replicas: 1
  imagePullPolicy: Always
  restartPolicy: Always

commandDelegator:
  name: greenops-commanddelegator
  image: docker.io/greenopsinc/commanddelegator:v1.0.0
  port: 8080
  replicas: 1
  imagePullPolicy: Always
  restartPolicy: Always

metricsServer:
  name: greenops-metricsserver
  image: docker.io/greenopsinc/greenops-metrics-server:v0.10.0
  port: 2112
  replicas: 1
  imagePullPolicy: Always
  restartPolicy: Always

redis:
  name: redisserver
  image: redis
  port: 6379
  replicas: 1
  imagePullPolicy: IfNotPresent
  restartPolicy: Always
  volume:
    name: redis-storage
    persistentVolume:
      name: redis-pv
      labels:
        topology.kubernetes.io/region: ""
        topology.kubernetes.io/zone: ""
        type: ""
      gcePersistentDisk:
        pdName: ""
        fsType: ""
    persistentVolumeClaim:
      name: redis.pvc

dex:
  name: greenops-dex-server
  image:
    repository: ghcr.io/dexidp/dex
    tag: v2.30.2
    imagePullPolicy: IfNotPresent
  initImage:
    repository: quay.io/argoproj/argocd
    tag: v2.4.10
    imagePullPolicy: IfNotPresent

  # -- Environment variables to pass to the Dex server
  env:
    - name: GREENOPS_SSO_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: greenops-sso
          key: client-secret

  serviceAccount:
    # -- Create dex service account
    create: true
    # -- Dex service account name
    name: argocd-dex-server
    # -- Annotations applied to created service account
    annotations: {}
    # -- Automount API credentials for the Service Account
    automountServiceAccountToken: true

  # -- Additional volumeMounts to the dex main container
  volumeMounts:
    - name: static-files
      mountPath: /shared

  # -- Additional volumes to the dex pod
  volumes:
    - name: static-files
      emptyDir: {}

  # -- Container port for HTTP access
  containerPortHttp: 5556
  # -- Service port for HTTP access
  servicePortHttp: 5556
  # -- Service port name for HTTP access
  servicePortHttpName: http
  # -- Container port for gRPC access
  containerPortGrpc: 5557
  # -- Service port for gRPC access
  servicePortGrpc: 5557
  # -- Service port name for gRPC access
  servicePortGrpcName: grpc
  # -- Container port for metrics access
  containerPortMetrics: 5558
  # -- Service port for metrics access
  servicePortMetrics: 5558
