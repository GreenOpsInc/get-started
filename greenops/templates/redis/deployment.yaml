{{ if .Values.common.db.deployRedis }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    {{- include "greenops.labels" (dict "context" . "component" .Values.redis.name "name" .Values.redis.name) | nindent 4 }}
  name: {{ .Values.redis.name }}
  namespace: {{ .Values.common.namespace }}
spec:
  replicas: {{ .Values.redis.replicas }}
  selector:
    matchLabels:
      {{- include "greenops.selectorLabels" (dict "context" . "name" .Values.redis.name) | nindent 6 }}
  strategy: {}
  template:
    metadata:
      labels:
        {{- include "greenops.labels" (dict "context" . "component" .Values.redis.name "name" .Values.redis.name) | nindent 8 }}
    spec:
      containers:
        - args:
            - '--appendonly'
            - 'yes'
            - '--appendfsync'
            - always
            - '--save 60 1'
          image: {{ .Values.redis.image }}
          imagePullPolicy: {{ .Values.redis.imagePullPolicy }}
          name: {{ .Values.redis.name }}
          ports:
            - containerPort: {{ .Values.redis.port }}
          resources: {}
          volumeMounts:
            - name: redis-storage
              mountPath: /data
      restartPolicy: {{ .Values.redis.restartPolicy }}
      {{ if .Values.common.db.usePersistentVolume }}
      volumes:
        - name: {{ .Values.redis.volume.name }}
          persistentVolumeClaim:
            claimName: {{ .Values.redis.volume.persistentVolumeClaim.name }}
      {{ else }}
      volumes:
        - name: redis-storage
          emptyDir: { }
      {{ end }}
{{ end }}
